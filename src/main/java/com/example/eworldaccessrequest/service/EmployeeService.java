package com.example.eworldaccessrequest.service;

import com.example.eworldaccessrequest.dto.EmployeeDTO;
import com.example.eworldaccessrequest.entity.AccessGroup;
import com.example.eworldaccessrequest.entity.Employee;
import com.example.eworldaccessrequest.entity.EmployeeAccessGroup;
import com.example.eworldaccessrequest.exception.*;
import com.example.eworldaccessrequest.repository.AccessGroupRepository;
import com.example.eworldaccessrequest.repository.EmployeeAccessGroupRepository;
import com.example.eworldaccessrequest.repository.EmployeeRepository;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;

import org.apache.commons.text.WordUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;


@Service
public class EmployeeService {

    @Autowired
    private EmployeeRepository employeeRepository;

    @Autowired
    private AccessGroupRepository accessGroupRepository;

    @Autowired
    private EmployeeAccessGroupRepository employeeAccessGroupRepository;

    // DTO Converter
    public EmployeeDTO convertToDto(Employee employee) {

        EmployeeDTO employeeDTO = new EmployeeDTO();
        employeeDTO.setID(employee.getID());
        employeeDTO.setFullName(employee.getFullName());
        employeeDTO.setEmail(employee.getEmail());
        employeeDTO.setBes(employee.isBes());
        employeeDTO.setOffshore(employee.isOffshore());
        ArrayList employeeAccessGroupDTOs = new ArrayList();
        if (employee.getEmployeeAccessGroups() == null || employee.getEmployeeAccessGroups().isEmpty()) {
            employeeDTO.setEmployeeAccessGroupDTOs(employeeAccessGroupDTOs);
        } else {
            for (EmployeeAccessGroup employeeAccessGroup : employee.getEmployeeAccessGroups()) {
                employeeAccessGroupDTOs.add(EmployeeAccessGroupService.convertToDto(employeeAccessGroup));
            }
            employeeDTO.setEmployeeAccessGroupDTOs(employeeAccessGroupDTOs);
        }
        return employeeDTO;


    }

    // Save
    public EmployeeDTO saveEmployee(EmployeeDTO employeeDTO) throws EmptyStringException, InvalidEmailException {
        if ("".equalsIgnoreCase(employeeDTO.getFullName()) || "".equalsIgnoreCase(employeeDTO.getEmail())) {
            throw new EmptyStringException();
        }
        Employee employee = new Employee();

        // Format fullName and email fields.
        employee.setEmail(employeeDTO.getEmail().toLowerCase());
        employee.setFullName(WordUtils.capitalize(employeeDTO.getFullName().toLowerCase()));

        if (!employeeDTO.getEmail().contains("@eworldes.com")) {
            throw new InvalidEmailException();
        }

        employee.setBes(employeeDTO.isBes());
        employee.setOffshore(employeeDTO.isOffshore());

        if (employeeDTO.getID() != null) {
            employee.setID(employeeDTO.getID());
        } else {
            //Initial save to automatically generate Employee ID necessary for EmployeeAccessGroups
            employeeRepository.save(employee);
        }

        //Creates EmployeeAccessGroup objects from autogenerated EmployeeID and AccessGroupIDs
        List<EmployeeAccessGroup> employeeAccessGroups = new ArrayList<>();

        if (employeeDTO.getAccessGroupIDs() != null) {
            for (Long accessGroupID : employeeDTO.getAccessGroupIDs()) {
                employeeAccessGroups.add(createEmployeeAccessGroup(employee.getID(), accessGroupID));
            }
            employee.setEmployeeAccessGroups(employeeAccessGroups);
        }

        return convertToDto(employeeRepository.save(employee));
    }

    // List all employees
    public List<EmployeeDTO> fetchEmployeeList() {
        List<Employee> employees = employeeRepository.findAll();
        ArrayList employeeDTOs = new ArrayList();
        for (Employee employee : employees) {
            employeeDTOs.add(convertToDto(employee));
        }
        return employeeDTOs;
    }

    // List specific employee by ID
    public EmployeeDTO fetchEmployeeByID(Long employeeID) throws EmployeeNotFoundException {
        if (Objects.isNull(employeeRepository.findByID(employeeID))) {
            throw new EmployeeNotFoundException();
        }
        return convertToDto(employeeRepository.findByID(employeeID));
    }

    // List specific employee by email
    public EmployeeDTO fetchEmployeeByEmail(String email) throws EmployeeNotFoundException {
        if (email.isEmpty() || Objects.isNull(employeeRepository.findByEmail(email))) {
            throw new EmployeeNotFoundException();
        }
        return convertToDto(employeeRepository.findByEmail(email));
    }

    // List employees by specific access group
    public List<EmployeeDTO> fetchEmployeesByAccessGroupID(Long accessGroupID) throws EmployeeNotFoundException {
        if (employeeRepository.findEmployeesByAccessGroupID(accessGroupID).size() == 0) {
            throw new EmployeeNotFoundException();
        }
        List<Employee> employees = employeeRepository.findEmployeesByAccessGroupID(accessGroupID);
        ArrayList employeeDTOs = new ArrayList();
        for (Employee employee : employees) {
            employeeDTOs.add(convertToDto(employee));
        }
        return employeeDTOs;
    }

    // List employees with expired DHS_Forms
    @Deprecated
    public List<EmployeeDTO> fetchEmployeesWithExpiredDHSForms() throws NoEmployeesWithExpiredAccessGroupsException {
        LocalDate rightNow = LocalDate.now();
        if (employeeRepository.findEmployeesWithExpiredDHSForms(rightNow).size() == 0) {
            throw new NoEmployeesWithExpiredAccessGroupsException();
        }

        //Removes duplicate Employees
        List<Employee> employees = employeeRepository.findEmployeesWithExpiredDHSForms(rightNow).stream()
                .distinct()
                .collect(Collectors.toList());

        return getEmployeeDTOS(employees);
    }

    // List employees with soon-to-be expired DHS_Forms
    @Deprecated
    public List<EmployeeDTO> fetchEmployeesWithSoonToBeExpiredDHSFormsInOneMonth() throws NoEmployeesWithSoonToBeExpiredAccessGroupsException {
        LocalDate rightNow = LocalDate.now();
        LocalDate oneMonth = rightNow.plusMonths(1);
        if (employeeRepository.findEmployeesWithSoonToBeExpiredDHSFormsInOneMonth(rightNow, oneMonth).size() == 0) {
            throw new NoEmployeesWithSoonToBeExpiredAccessGroupsException();
        }

        //Removes duplicate Employees
        List<Employee> employees = employeeRepository.findEmployeesWithSoonToBeExpiredDHSFormsInOneMonth(rightNow, oneMonth).stream()
                .distinct()
                .collect(Collectors.toList());

        return getEmployeeDTOS(employees);
    }

    // Update
    public EmployeeDTO updateEmployee(EmployeeDTO employeeDTO, Long ID) {
        Employee depDB = employeeRepository.findById(ID).get();

        if (Objects.nonNull(employeeDTO.getFullName()) && !"".equalsIgnoreCase(employeeDTO.getFullName())) {
            depDB.setFullName(WordUtils.capitalize(employeeDTO.getFullName().toLowerCase()));
        }

        if (Objects.nonNull(employeeDTO.getEmail()) && !"".equalsIgnoreCase(employeeDTO.getEmail()) && employeeDTO.getEmail().contains("@eworldes.com")) {
            depDB.setEmail(employeeDTO.getEmail().toLowerCase());
        }

        depDB.setOffshore(employeeDTO.isOffshore());

        depDB.setBes(employeeDTO.isBes());

        //Deletes Access Groups that Employee is no longer a part of
        List<EmployeeAccessGroup> DBaccess = depDB.getEmployeeAccessGroups();

        for (EmployeeAccessGroup employeeAccessGroup : DBaccess) {
            if (!employeeDTO.getAccessGroupIDs().contains(employeeAccessGroup.getAccessGroup().getID())) {
                //Requires a Custom Delete Method w/ @Transactional otherwise deletes don't go through
                employeeAccessGroupRepository.deleteEmployeeAccessGroupByIDCustom(employeeAccessGroup.getID());
            }
        }

        //Creates EmployeeAccessGroup objects from Access Group IDs
        List<EmployeeAccessGroup> employeeAccessGroups = new ArrayList<>();
        if (employeeDTO.getAccessGroupIDs() != null) {
            for (Long accessGroupID : employeeDTO.getAccessGroupIDs()) {
                employeeAccessGroups.add(createEmployeeAccessGroup(ID, accessGroupID));
            }
        }

        //Prevents duplicate EmployeeAccessGroup entries
        for (EmployeeAccessGroup employeeAccessGroupDTO : employeeAccessGroups) {
            for (EmployeeAccessGroup employeeAccessGroupDB : depDB.getEmployeeAccessGroups()) {
                if (employeeAccessGroupDTO.getAccessGroup().getID() == employeeAccessGroupDB.getAccessGroup().getID()) {
                    employeeAccessGroupDTO.setID(employeeAccessGroupDB.getID());
                }
            }
        }

        depDB.setEmployeeAccessGroups(employeeAccessGroups);

        return convertToDto(employeeRepository.save(depDB));
    }

    // Delete
    public void deleteEmployeeById(Long ID) {
        employeeRepository.deleteById(ID);
    }

    // Helper method -- Removes EmployeeAccessGroups w/ no expiration dates from a list of Employees
    @Deprecated
    private List<EmployeeDTO> getEmployeeDTOS(List<Employee> employees) {
        ArrayList employeeDTOs = new ArrayList();
        ArrayList invalidEmployeeAccessGroups = new ArrayList();
        for (Employee employee : employees) {
            for (EmployeeAccessGroup employeeAccessGroup : employee.getEmployeeAccessGroups()) {
                if (employeeAccessGroup.getExpiration() == null) {
                    invalidEmployeeAccessGroups.add(employeeAccessGroup);
                }
            }
            employee.getEmployeeAccessGroups().removeAll(invalidEmployeeAccessGroups);
            invalidEmployeeAccessGroups.clear();
            employeeDTOs.add(convertToDto(employee));
        }
        return employeeDTOs;
    }

    //Helper Method -- Create EmployeeAccessGroups from autogenerated EmployeeID and AccessGroupIDs
    public EmployeeAccessGroup createEmployeeAccessGroup(Long employeeID, Long accessGroupID) {

        Optional<AccessGroup> accessGroup = accessGroupRepository.findById(accessGroupID);
        Optional<Employee> employee = employeeRepository.findById(employeeID);
        EmployeeAccessGroup employeeAccessGroup = new EmployeeAccessGroup(employee.get(), accessGroup.get(), null);
        return employeeAccessGroup;
    }

}
